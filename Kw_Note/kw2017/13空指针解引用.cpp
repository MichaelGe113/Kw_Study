之前检查过的空指针可能通过函数调用被取消引用
1.NPD.CHECK.CALL.MIGHT
NPD 检查器查找那些对空指针或可能为空的指针进行取消引用的实例。
NPD.CHECK.CALL.MIGHT 检查器标记了那些可能将经过空值检查的空指针
随后传递给某个可能不进行空值检查就对其取消引用的函数的情况。



之前检查过的空指针通过函数调用被取消引用
2.NPD.CHECK.CALL.MUST


之前检查过的空指针可能被取消引用
3.NPD.CHECK.MIGHT
NPD.CHECK.MIGHT 检查器标记了那些经空值检查的指针在之后可能被明确
取消引用，或通过不进行空值检查的函数调用来取消引用的情况。

之前检查过的空指针被取消引用
4.NPD.CHECK.MUST


空指针常数值可能通过函数调用被取消引用
5.NPD.CONST.CALL
NPD.CONST.CALL 检查器标记了那些可能将空指针常数值传递给
某个不进行空值检查就对其取消引用的函数的情况


空指针常数值被取消引用
6.NPD.CONST.DEREF
NPD.CONST.DEREF 检查器标记了那些明确或通过函数调用来取消引用
空指针常数值的情况


可能存在的空指针可能通过条件函数调用被取消引用
7.NPD.FUNC.CALL.MIGHT
NPD.FUNC.CALL.MIGHT 检查器标记了那些来自可能返回空值的函数调用的
指针值之后可能被传递给某个不进行空值检查就可能对其取消引用的函数的情况。


可能存在的空指针可能通过函数调用被取消引用
8.NPD.FUNC.CALL.MUST


可能取消引用可能存在的空指针
Possible null pointer may be dereferenced
9.NPD.FUNC.MIGHT
NPD.FUNC.MIGHT 检查器标记了那些来自可能返回空值的函数调用的指针值，之后
可能被明确地取消引用或传递给某个不进行空值检查就对其取消引用的函数的情况。


空指针被取消引用的可能性
10.NPD.FUNC.MUST


可能存在的已分配空指针可能通过条件函数调用被取消引用
11.NPD.GEN.CALL.MIGHT
NPD.GEN.CALL.MIGHT 检查器标记了那些可能在本地被分配了空常数值的空指针
之后可能被传递给某个不进行空值检查就对其取消引用的函数的情况。


已分配的空指针可能通过函数调用被取消引用的可能性
12.NPD.GEN.CALL.MUST


分配的空指针常数值可能被取消引用
13.NPD.GEN.MIGHT


分配的空指针常数值被取消引用
14.NPD.GEN.MUST


在函数调用中在进行 NULL 检查前对指针进行可疑的取消引用
15.RNPD.CALL


在进行 NULL 检查前对指针进行可疑的取消引用
16.RNPD.DEREF





漏洞与风险
  空指针取消引用通常会导致进程失败。这些问题通常是因为无效的异常处理而发生的。

缓解与预防
要避免该漏洞：
  对所有将返回值的函数进行空值检查
  确保所有外部输入都经过验证
  明确地对变量进行初始化
  确保对不同寻常的异常进行正确处理
